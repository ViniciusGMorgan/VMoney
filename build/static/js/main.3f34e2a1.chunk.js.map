{"version":3,"sources":["services/api.ts","components/hooks/useTransactions.tsx","components/Summary/styles.ts","assets/income.svg","assets/outcome.svg","assets/total.svg","components/Summary/index.tsx","components/TransactionsTable/styles.ts","components/TransactionsTable/index.tsx","components/Dashboard/styles.ts","components/Dashboard/index.tsx","assets/logo.svg","components/Header/styles.ts","components/Header/index.tsx","components/NewTransactionModal/styles.ts","assets/close.svg","components/NewTransactionModal/index.tsx","styles/global.ts","App.tsx","index.tsx"],"names":["api","axios","create","baseURL","TransactionContext","createContext","TransactionsProvider","children","useState","transactions","setTransactions","transactionsInput","post","createdAt","Date","response","transaction","data","useEffect","get","then","Provider","value","createTransaction","useTransactions","useContext","Container","styled","div","Summary","summary","reduce","acc","type","deposit","amount","total","withdraw","src","IncomeImg","alt","Intl","NumberFormat","style","currency","format","OutcomeImg","className","TotalImg","TransactionsTable","length","map","title","category","DateTimeFormat","id","main","Dashboard","header","Content","Header","onOpenNewTransactionModal","logoImg","onClick","TransitionTypeContent","colors","green","red","RadioBox","button","props","isActive","transparentize","activeColor","darken","NewTransactionModal","isOpen","onRequestClose","setType","setTitle","setAmount","setCategory","event","preventDefault","overlayClassName","CloseImg","placeholder","onChange","target","Number","incomeIgm","outcomeIgm","GlobalStyle","createGlobalStyle","App","isNewTransactionModalOpen","setIsNewTransactionModalOpen","Modal","setAppElement","createServer","models","Model","seeds","server","db","loadData","routes","this","namespace","schema","all","request","JSON","parse","requestBody","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.3f34e2a1.chunk.js","sourcesContent":["import axios from \"axios\";\r\n\r\nexport const api = axios.create({\r\n  baseURL: \"http://localhost:3000/api\",\r\n});\r\n","import {\r\n  createContext,\r\n  ReactNode,\r\n  useContext,\r\n  useEffect,\r\n  useState,\r\n} from \"react\";\r\nimport { api } from \"../../services/api\";\r\n\r\ninterface TransactionProps {\r\n  id: number;\r\n  title: string;\r\n  type: string;\r\n  category: string;\r\n  amount: number;\r\n  createdAt: string;\r\n}\r\n\r\ninterface TransactionProviderProps {\r\n  children: ReactNode;\r\n}\r\n\r\ntype TransactionInput = Omit<TransactionProps, \"id\" | \"createdAt\">;\r\n\r\ninterface TransactionContextData {\r\n  transactions: TransactionProps[];\r\n  createTransaction: (transaction: TransactionInput) => Promise<void>;\r\n}\r\n\r\nconst TransactionContext = createContext<TransactionContextData>(\r\n  {} as TransactionContextData\r\n);\r\n\r\nexport function TransactionsProvider({ children }: TransactionProviderProps) {\r\n  const [transactions, setTransactions] = useState<TransactionProps[]>([]);\r\n  useEffect(() => {\r\n    api\r\n      .get(\"transactions\")\r\n      .then((response) => setTransactions(response.data.transactions));\r\n  }, []);\r\n\r\n  async function createTransaction(transactionsInput: TransactionInput) {\r\n    const response = await api.post(\"/transactions\", {\r\n      ...transactionsInput,\r\n      createdAt: new Date(),\r\n    });\r\n    const { transaction } = response.data;\r\n\r\n    setTransactions([...transactions, transaction]);\r\n  }\r\n\r\n  return (\r\n    <TransactionContext.Provider value={{ transactions, createTransaction }}>\r\n      {children}\r\n    </TransactionContext.Provider>\r\n  );\r\n}\r\n\r\nexport function useTransactions() {\r\n  const context = useContext(TransactionContext);\r\n\r\n  return context;\r\n}\r\n","import styled from \"styled-components\";\r\n\r\nexport const Container = styled.div`\r\n  display: grid;\r\n  grid-template-columns: repeat(3, 1fr);\r\n  gap: 2rem;\r\n  margin-top: -7rem;\r\n  div {\r\n    background: var(--shape);\r\n    padding: 1.5rem 2rem;\r\n    border-radius: 0.25rem;\r\n    color: var(--text-title);\r\n\r\n    header {\r\n      display: flex;\r\n      align-items: center;\r\n      justify-content: space-between;\r\n    }\r\n\r\n    strong {\r\n      display: block;\r\n      margin-top: 1rem;\r\n      font-size: 2rem;\r\n      font-weight: 500;\r\n      line-height: 3rem;\r\n    }\r\n    &.highlight-background {\r\n      background: var(--green);\r\n      color: #fff;\r\n    }\r\n    /* &.greencontainer {\r\n            background: var(--green);\r\n            color: var(--input);\r\n        }\r\n        &.redcontainer {\r\n            background: var(--red);\r\n            color: var(--input);\r\n        } */\r\n  }\r\n  @media (max-width: 768px) {\r\n    grid-template-columns: repeat(1, 1fr);\r\n    grid-template-rows: repeat(3, 1fr);\r\n  }\r\n`;\r\n","export default __webpack_public_path__ + \"static/media/income.d58effe2.svg\";","export default __webpack_public_path__ + \"static/media/outcome.6eb96d30.svg\";","export default __webpack_public_path__ + \"static/media/total.e90c2d1e.svg\";","import { useTransactions } from \"../hooks/useTransactions\";\r\n\r\nimport { Container } from \"./styles\";\r\nimport IncomeImg from \"../../assets/income.svg\";\r\nimport OutcomeImg from \"../../assets/outcome.svg\";\r\nimport TotalImg from \"../../assets/total.svg\";\r\n\r\nexport function Summary() {\r\n  const { transactions } = useTransactions();\r\n\r\n  const summary = transactions.reduce(\r\n    (acc, transaction) => {\r\n      if (transaction.type === \"deposit\") {\r\n        acc.deposit += transaction.amount;\r\n        acc.total += transaction.amount;\r\n      } else {\r\n        acc.withdraw += transaction.amount;\r\n        acc.total -= transaction.amount;\r\n      }\r\n      return acc;\r\n    },\r\n    {\r\n      deposit: 0,\r\n      withdraw: 0,\r\n      total: 0,\r\n    }\r\n  );\r\n\r\n  return (\r\n    <Container>\r\n      <div>\r\n        <header>\r\n          <p>Entradas</p>\r\n          <img src={IncomeImg} alt=\"Entradas\" />\r\n        </header>\r\n        <strong>\r\n          {new Intl.NumberFormat(\"pt-BR\", {\r\n            style: \"currency\",\r\n            currency: \"BRL\",\r\n          }).format(summary.deposit)}\r\n        </strong>\r\n      </div>\r\n      <div>\r\n        <header>\r\n          <p>Saídas</p>\r\n          <img src={OutcomeImg} alt=\"Saídas\" />\r\n        </header>\r\n        <strong>\r\n          -\r\n          {new Intl.NumberFormat(\"pt-BR\", {\r\n            style: \"currency\",\r\n            currency: \"BRL\",\r\n          }).format(summary.withdraw)}\r\n        </strong>\r\n      </div>\r\n      <div className={summary.total > 0 ? \"greencontainer\" : \"redcontainer\"}>\r\n        <header>\r\n          <p>Total</p>\r\n          <img src={TotalImg} alt=\"Total\" />\r\n        </header>\r\n        <strong>\r\n          {new Intl.NumberFormat(\"pt-BR\", {\r\n            style: \"currency\",\r\n            currency: \"BRL\",\r\n          }).format(summary.total)}\r\n        </strong>\r\n      </div>\r\n    </Container>\r\n  );\r\n}\r\n","import styled from \"styled-components\";\r\n\r\nexport const Container = styled.div`\r\n  margin-top: 4rem;\r\n  table {\r\n    width: 100%;\r\n    border-spacing: 0 0.5rem;\r\n\r\n    th {\r\n      color: var(--text-body);\r\n      font-weight: 400;\r\n      padding: 1rem 2rem;\r\n      text-align: left;\r\n      line-height: 1.5rem;\r\n    }\r\n\r\n    td {\r\n      padding: 1rem 2rem;\r\n      border: 0;\r\n      background: var(--shape);\r\n      color: var(--text-body);\r\n      border-radius: 0.25rem;\r\n      &:first-child {\r\n        color: var(--text-title);\r\n      }\r\n      &.deposit {\r\n        color: var(--green);\r\n      }\r\n      &.withdraw {\r\n        color: var(--red);\r\n      }\r\n    }\r\n  }\r\n\r\n  @media (max-width: 768px) {\r\n    table {\r\n      td {\r\n        text-align: center;\r\n      }\r\n    }\r\n  }\r\n`;\r\n","import { useTransactions } from \"../hooks/useTransactions\";\r\nimport { Container } from \"./styles\";\r\n\r\nexport function TransactionsTable() {\r\n  const { transactions } = useTransactions();\r\n\r\n  return (\r\n    <Container>\r\n      <table>\r\n        {transactions.length ? (\r\n          <thead>\r\n            <tr>\r\n              <th>Título</th>\r\n              <th>Valor</th>\r\n              <th>Categoria</th>\r\n              <th>Data</th>\r\n            </tr>\r\n          </thead>\r\n        ) : null}\r\n        <tbody>\r\n          {transactions.map((transaction) => (\r\n            <tr key={transaction.id}>\r\n              <td>{transaction.title}</td>\r\n              <td className={transaction.type}>\r\n                {transaction.type === \"withdraw\" && \"-\"}\r\n\r\n                {new Intl.NumberFormat(\"pt-BR\", {\r\n                  style: \"currency\",\r\n                  currency: \"BRL\",\r\n                }).format(transaction.amount)}\r\n              </td>\r\n              <td>{transaction.category}</td>\r\n              <td>\r\n                {new Intl.DateTimeFormat(\"pt-BR\").format(\r\n                  new Date(transaction.createdAt)\r\n                )}\r\n              </td>\r\n            </tr>\r\n          ))}\r\n        </tbody>\r\n      </table>\r\n    </Container>\r\n  );\r\n}\r\n","import styled from \"styled-components\";\r\n\r\nexport const Container = styled.main`\r\n  max-width: 1120px;\r\n  margin: 0 auto;\r\n  padding: 2.5rem 1rem;\r\n`;\r\n","import { Summary } from \"../Summary\";\r\nimport { TransactionsTable } from \"../TransactionsTable\";\r\n\r\nimport { Container } from \"./styles\";\r\n\r\nexport function Dashboard() {\r\n  return (\r\n    <Container>\r\n      <Summary />\r\n      <TransactionsTable />\r\n    </Container>\r\n  );\r\n}\r\n","export default __webpack_public_path__ + \"static/media/logo.978623b3.svg\";","import styled from \"styled-components\";\r\n\r\nexport const Container = styled.header`\r\n  background: var(--blue);\r\n`;\r\n\r\nexport const Content = styled.div`\r\n  max-width: 1120px;\r\n  margin: 0 auto;\r\n  padding: 2rem 1rem 12rem;\r\n  display: flex;\r\n  align-items: center;\r\n  justify-content: space-between;\r\n  div {\r\n    display: flex;\r\n  }\r\n  span {\r\n    font-size: 2.5rem;\r\n    color: var(--shape);\r\n  }\r\n\r\n  button {\r\n    font-size: 1rem;\r\n    color: #fff;\r\n    background: var(--blue-light);\r\n    border: 0;\r\n    padding: 0 2rem;\r\n    border-radius: 0.25rem;\r\n    height: 3rem;\r\n    transition: filter 0.2s;\r\n    &:hover {\r\n      filter: brightness(0.9);\r\n    }\r\n  }\r\n  @media (max-width: 768px) {\r\n    max-width: 100%;\r\n    flex-direction: column;\r\n    gap: 2rem;\r\n    padding: 2rem 1rem 6rem;\r\n  }\r\n`;\r\n","import logoImg from \"../../assets/logo.svg\";\r\nimport { Container, Content } from \"./styles\";\r\n\r\ninterface HeaderProps {\r\n  onOpenNewTransactionModal: () => void;\r\n}\r\n\r\nexport function Header({ onOpenNewTransactionModal }: HeaderProps) {\r\n  return (\r\n    <Container>\r\n      <Content>\r\n        <div>\r\n          <img src={logoImg} alt=\"dt money\" />\r\n          <span>VMoney.</span>\r\n        </div>\r\n        <button type=\"button\" onClick={onOpenNewTransactionModal}>\r\n          Nova transação\r\n        </button>\r\n      </Content>\r\n    </Container>\r\n  );\r\n}\r\n","import styled from \"styled-components\";\r\nimport { darken, transparentize } from \"polished\";\r\n\r\nexport const Container = styled.div`\r\n  h2 {\r\n    color: var(--text-title);\r\n    font-size: 1.5rem;\r\n    margin-bottom: 2rem;\r\n  }\r\n  input {\r\n    width: 100%;\r\n    padding: 0 1.5rem;\r\n    height: 4rem;\r\n    border-radius: 0.25rem;\r\n    background: var(--input);\r\n    border: 1px solid #d7d7d7;\r\n    font-weight: 400;\r\n    font-size: 1rem;\r\n    &::placeholder {\r\n      color: var(--text-text);\r\n    }\r\n    & + input {\r\n      margin-top: 1rem;\r\n    }\r\n  }\r\n  button[type=\"submit\"] {\r\n    width: 100%;\r\n    padding: 0 1.5rem;\r\n    height: 4rem;\r\n    background: var(--green);\r\n    color: #fff;\r\n    border-radius: 0.25rem;\r\n    border: 0;\r\n    font-size: 1rem;\r\n    margin-top: 1.5rem;\r\n    font-weight: 600;\r\n    transition: filter 0.2s;\r\n    &:hover {\r\n      filter: brightness(0.9);\r\n    }\r\n  }\r\n`;\r\n\r\nexport const TransitionTypeContent = styled.div`\r\n  margin: 1rem 0;\r\n  display: grid;\r\n  grid-template-columns: 1fr 1fr;\r\n  gap: 0.5rem;\r\n`;\r\n\r\ninterface RadioBoxProps {\r\n  isActive: Boolean;\r\n  activeColor: \"green\" | \"red\";\r\n}\r\n\r\nconst colors = {\r\n  green: \"#33CC95\",\r\n  red: \"#E52E4D\",\r\n};\r\n\r\nexport const RadioBox = styled.button<RadioBoxProps>`\r\n  height: 4rem;\r\n  border: 1px solid #d7d7d7;\r\n  border-radius: 0.25rem;\r\n  background: ${(props) =>\r\n    props.isActive\r\n      ? transparentize(0.9, colors[props.activeColor])\r\n      : \"transparent\"};\r\n  display: flex;\r\n  align-items: center;\r\n  justify-content: center;\r\n  transition: border-color 0.2s;\r\n  &:hover {\r\n    border-color: ${darken(0.1, \"#d7d7d7\")};\r\n  }\r\n\r\n  img {\r\n    width: 20px;\r\n    height: 20px;\r\n  }\r\n  span {\r\n    display: inline-block;\r\n    font-size: 1rem;\r\n    margin-left: 1rem;\r\n    color: var(--text-title);\r\n  }\r\n`;\r\n","export default __webpack_public_path__ + \"static/media/close.f62862c6.svg\";","import { FormEvent, useState } from \"react\";\r\nimport Modal from \"react-modal\";\r\n\r\nimport { Container, TransitionTypeContent, RadioBox } from \"./styles\";\r\nimport CloseImg from \"../../assets/close.svg\";\r\nimport incomeIgm from \"../../assets/income.svg\";\r\nimport outcomeIgm from \"../../assets/outcome.svg\";\r\n\r\nimport { useTransactions } from \"../hooks/useTransactions\";\r\n\r\ninterface NewTransactionModalProps {\r\n  isOpen: boolean;\r\n  onRequestClose: () => void;\r\n}\r\n\r\nexport function NewTransactionModal({\r\n  isOpen,\r\n  onRequestClose,\r\n}: NewTransactionModalProps) {\r\n  const { createTransaction } = useTransactions();\r\n\r\n  const [type, setType] = useState(\"deposit\");\r\n  const [title, setTitle] = useState(\"\");\r\n  const [amount, setAmount] = useState(0);\r\n  const [category, setCategory] = useState(\"\");\r\n\r\n  async function handleCreateNewTransaction(event: FormEvent) {\r\n    event.preventDefault();\r\n\r\n    await createTransaction({\r\n      title,\r\n      type,\r\n      category,\r\n      amount,\r\n    });\r\n\r\n    setTitle(\"\");\r\n    setAmount(0);\r\n    setCategory(\"\");\r\n    setType(\"deposit\");\r\n\r\n    onRequestClose();\r\n  }\r\n\r\n  return (\r\n    <Modal\r\n      isOpen={isOpen}\r\n      onRequestClose={onRequestClose}\r\n      overlayClassName=\"react-modal-overlay\"\r\n      className=\"react-modal-content\"\r\n    >\r\n      <button\r\n        type=\"button\"\r\n        onClick={onRequestClose}\r\n        className=\"react-modal-close\"\r\n      >\r\n        <img src={CloseImg} alt=\"Fexar modal\" />\r\n      </button>\r\n\r\n      <Container>\r\n        <h2>Cadastrar transação</h2>\r\n\r\n        <input\r\n          type=\"text\"\r\n          placeholder=\"Título\"\r\n          value={title}\r\n          onChange={(event) => setTitle(event.target.value)}\r\n        />\r\n\r\n        <input\r\n          type=\"number\"\r\n          placeholder=\"Valor\"\r\n          value={amount}\r\n          onChange={(event) => setAmount(Number(event.target.value))}\r\n        />\r\n\r\n        <TransitionTypeContent>\r\n          <RadioBox\r\n            type=\"button\"\r\n            onClick={() => {\r\n              setType(\"deposit\");\r\n            }}\r\n            isActive={type === \"deposit\"}\r\n            activeColor=\"green\"\r\n          >\r\n            <img src={incomeIgm} alt=\"Entrada\" />\r\n            <span>Entrada</span>\r\n          </RadioBox>\r\n\r\n          <RadioBox\r\n            type=\"button\"\r\n            onClick={() => {\r\n              setType(\"withdraw\");\r\n            }}\r\n            isActive={type === \"withdraw\"}\r\n            activeColor=\"red\"\r\n          >\r\n            <img src={outcomeIgm} alt=\"Saída\" />\r\n            <span>Saída</span>\r\n          </RadioBox>\r\n        </TransitionTypeContent>\r\n\r\n        <input\r\n          placeholder=\"Categoria\"\r\n          value={category}\r\n          onChange={(event) => setCategory(event.target.value)}\r\n        />\r\n\r\n        <button type=\"submit\" onClick={handleCreateNewTransaction}>\r\n          Cadastrar\r\n        </button>\r\n      </Container>\r\n    </Modal>\r\n  );\r\n}\r\n","import { createGlobalStyle } from \"styled-components\";\r\n\r\nexport const GlobalStyle = createGlobalStyle`\r\n  :root {\r\n    --background: #f0f2f5;\r\n    --red: #e52e4d;\r\n    --green: #33cc95;\r\n    --blue:  #00004d;\r\n    --blue-light: #6666ff;\r\n    --text-title: #363f5f;\r\n    --text-body: #969cb3;\r\n    --shape: #ffffff;\r\n    --input: #d7d7d7;\r\n  }\r\n  * {\r\n    margin: 0;\r\n    padding: 0;\r\n    box-sizing: border-box;\r\n  }\r\n  // font-size: 16px (Desktop)\r\n  html {\r\n    @media (max-width: 1080px) {\r\n      font-size: 93.75%; //15px\r\n    }\r\n    @media (max-width: 720px) {\r\n      font-size: 87.5%; //14px\r\n    }\r\n  }\r\n  body {\r\n    background: var(--background);\r\n    -webkit-font-smoothing: antialiased;\r\n  }\r\n  body, input, textarea, button {\r\n    font-family: 'Poppins', sans-serif;\r\n    font-weight: 400;\r\n  }\r\n  \r\n  h1, h2, h3, h4, h5, h6, strong {\r\n    font-weight: 600;\r\n  }\r\n  button {\r\n    cursor: pointer;\r\n  }\r\n  [disabled] {\r\n    opacity: 0.6;\r\n    cursor: not-allowed;\r\n  }\r\n  .react-modal-overlay {\r\n        background: rgba(0, 0, 0, 0.5);\r\n        position: fixed;\r\n        top: 0;\r\n        left: 0;\r\n        bottom: 0;\r\n        right: 0;\r\n        display: flex;\r\n        align-items: center;\r\n        justify-content: center;\r\n    }\r\n    .react-modal-content {\r\n        width: 100%;\r\n        max-width: 576px;\r\n        background: var(--background);\r\n        padding: 3rem;\r\n        position: relative;\r\n        border-radius: 0.25rem;\r\n    }\r\n    .react-modal-close {\r\n        position: absolute;\r\n        top: 1.5rem;\r\n        right: 1.5rem;\r\n        border: none;\r\n        background: transparent;\r\n        transition: filter 0.2s;\r\n        &:hover {\r\n            filter: brightness(0.7);\r\n        }\r\n    }\r\n`;\r\n","import { useState } from \"react\";\nimport Modal from \"react-modal\";\n\nimport { Dashboard } from \"./components/Dashboard\";\nimport { Header } from \"./components/Header\";\nimport { NewTransactionModal } from \"./components/NewTransactionModal\";\n\nimport { TransactionsProvider } from \"./components/hooks/useTransactions\";\n\nimport { GlobalStyle } from \"./styles/global\";\n\nModal.setAppElement(\"#root\");\n\nexport function App() {\n  const [isNewTransactionModalOpen, setIsNewTransactionModalOpen] =\n    useState(false);\n\n  function handleOpenNewTransactionModal() {\n    setIsNewTransactionModalOpen(true);\n  }\n\n  function handleCloseNewTransactionModal() {\n    setIsNewTransactionModalOpen(false);\n  }\n\n  return (\n    <TransactionsProvider>\n      <Header onOpenNewTransactionModal={handleOpenNewTransactionModal} />\n\n      <Dashboard />\n\n      <NewTransactionModal\n        isOpen={isNewTransactionModalOpen}\n        onRequestClose={handleCloseNewTransactionModal}\n      />\n\n      <GlobalStyle />\n    </TransactionsProvider>\n  );\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport { createServer, Model } from \"miragejs\";\nimport { App } from \"./App\";\n\ncreateServer({\n  models: {\n    transaction: Model,\n  },\n\n  seeds(server) {\n    server.db.loadData({\n      transactions: [],\n    });\n  },\n\n  routes() {\n    this.namespace = \"api\";\n\n    this.get(\"/transactions\", () => {\n      return this.schema.all(\"transaction\");\n    });\n\n    this.post(\"/transactions\", (schema, request) => {\n      const data = JSON.parse(request.requestBody);\n\n      return schema.create(\"transaction\", data);\n    });\n  },\n});\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n"],"sourceRoot":""}